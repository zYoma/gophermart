// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	loyalty "github.com/zYoma/gophermart/internal/integrations/loyalty"

	models "github.com/zYoma/gophermart/internal/models"
)

// StorageProvider is an autogenerated mock type for the StorageProvider type
type StorageProvider struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, number, login
func (_m *StorageProvider) CreateOrder(ctx context.Context, number string, login string) error {
	ret := _m.Called(ctx, number, login)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, number, login)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, login, password
func (_m *StorageProvider) CreateUser(ctx context.Context, login string, password string) error {
	ret := _m.Called(ctx, login, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPasswordHash provides a mock function with given fields: ctx, login
func (_m *StorageProvider) GetPasswordHash(ctx context.Context, login string) (string, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetPasswordHash")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegisteresOrders provides a mock function with given fields: ctx
func (_m *StorageProvider) GetRegisteresOrders(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRegisteresOrders")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBalance provides a mock function with given fields: ctx, userLogin
func (_m *StorageProvider) GetUserBalance(ctx context.Context, userLogin string) (models.Balance, error) {
	ret := _m.Called(ctx, userLogin)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBalance")
	}

	var r0 models.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Balance, error)); ok {
		return rf(ctx, userLogin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Balance); ok {
		r0 = rf(ctx, userLogin)
	} else {
		r0 = ret.Get(0).(models.Balance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserOrders provides a mock function with given fields: ctx, userLogin
func (_m *StorageProvider) GetUserOrders(ctx context.Context, userLogin string) ([]models.Order, error) {
	ret := _m.Called(ctx, userLogin)

	if len(ret) == 0 {
		panic("no return value specified for GetUserOrders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Order, error)); ok {
		return rf(ctx, userLogin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Order); ok {
		r0 = rf(ctx, userLogin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserWithdrawals provides a mock function with given fields: ctx, userLogin
func (_m *StorageProvider) GetUserWithdrawals(ctx context.Context, userLogin string) ([]models.Withdrawn, error) {
	ret := _m.Called(ctx, userLogin)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithdrawals")
	}

	var r0 []models.Withdrawn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Withdrawn, error)); ok {
		return rf(ctx, userLogin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Withdrawn); ok {
		r0 = rf(ctx, userLogin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Withdrawn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *StorageProvider) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderAndAccrualPoints provides a mock function with given fields: ctx, orderData
func (_m *StorageProvider) UpdateOrderAndAccrualPoints(ctx context.Context, orderData *loyalty.OrderResponse) error {
	ret := _m.Called(ctx, orderData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderAndAccrualPoints")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *loyalty.OrderResponse) error); ok {
		r0 = rf(ctx, orderData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Withdrow provides a mock function with given fields: ctx, sum, userLogin, order
func (_m *StorageProvider) Withdrow(ctx context.Context, sum float64, userLogin string, order string) error {
	ret := _m.Called(ctx, sum, userLogin, order)

	if len(ret) == 0 {
		panic("no return value specified for Withdrow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, string, string) error); ok {
		r0 = rf(ctx, sum, userLogin, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorageProvider creates a new instance of StorageProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageProvider {
	mock := &StorageProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
